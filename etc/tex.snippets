extends markdown

global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False

def create_row_placeholders(snip):
    # retrieving singlee line from current string and treat it like tabstops
    # count
    placeholders_amount = int(snip.buffer[snip.line].strip())

    # erase current line
    snip.buffer[snip.line] = ''

    # create anonymous snippet with expected content and number of tabstops
    anon_snippet_body = ' & '.join(['$' + str(i+1)
                                    for i in range(placeholders_amount)])

    # expand anonymous snippet
    snip.expand_anon(anon_snippet_body)
def create_matrix_placeholders(snip):
    # retrieving singlee line from current string and treat it like tabstops
    # count
    sizestr = snip.buffer[snip.line].split('-')
    row = int(sizestr[1])
    column = int(sizestr[2])
    # erase current line
    snip.buffer[snip.line] = ''

    # create anonymous snippet with expected content and number of tabstops
    anon_snippet_body = "  \n".join([' & '.join(['$' + str(j*row+i+1)
                                    for i in range(column)])for j in range(row)])

    # expand anonymous snippet
    snip.expand_anon(anon_snippet_body)


endglobal

post_jump "create_row_placeholders(snip)"
snippet "tr(\d+)" "latex table row variable" br
`!p snip.rv = match.group(1)`
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet "mat\-(\d+)\-(\d+)" "latex matrix variable" r
`!p snip.rv = match.group()`
endsnippet


context "math()"
snippet ;a "\alpha" iA
\alpha
endsnippet

context "math()"
snippet ;A "\Alpha" iA
\Alpha
endsnippet


context "math()"
snippet ;: "Double Dots" iA
\ddot{$1}$0
endsnippet

context "math()"
snippet ;. "Top dot" iA
\dot{$1} $0
endsnippet

context "math()"
snippet ;-- "Equivalent" iA
\equiv
endsnippet

snippet beq "Begin Equation" bA
\begin{equation}
$2
\label{$1}
\end{equation}
$0
endsnippet
snippet bneq "Begin Equation" bA
\begin{equation*}
$1
\end{equation*}
$0
endsnippet

context "math()"
snippet ;b "beta" iA
\beta
endsnippet

context "math()"
snippet ;B "Beta" iA
\Beta
endsnippet

context "math()"
snippet ;c "chi" iA
\chi
endsnippet

context "math()"
snippet ;d "delta" iA
\delta
endsnippet
context "math()"
snippet ;D "Delta" iA
\Delta
endsnippet
context "math()"
snippet ;e "epsilon" iA
\epsilon
endsnippet
context "math()"
snippet ;ve "varepsilon" iA
\varepsilon
endsnippet
context "math()"
snippet ;f "phi" iA
\phi
endsnippet
context "math()"
snippet ;F "Phi" iA
\Phi
endsnippet
context "math()"
snippet ;vf "varphi" iA
\varphi
endsnippet

context "math()"
snippet ;g "gamma" iA
\gamma
endsnippet

context "math()"
snippet ;G "Gamma" iA
\Gamma
endsnippet

context "math()"
snippet ;' "prime" iA
\prime
endsnippet



context "math()"
snippet ;h "eta" iA
\eta
endsnippet

context "math()"
snippet ;i "iota" iA
\iota
endsnippet

context "math()"
snippet ;k "kappa" iA
\kappa
endsnippet

context "math()"
snippet ;l "lambda" iA
\lambda
endsnippet

context "math()"
snippet ;L "Lambda" iA
\Lambda
endsnippet

context "math()"
snippet ;m "mu" iA
\mu
endsnippet

context "math()"
snippet ;n "nu" iA
\nu
endsnippet

context "math()"
snippet grad "nabla" iA
\nabla
endsnippet


context "math()"
snippet ;O "Omega" iA
\Omega
endsnippet

context "math()"
snippet ;o "omega" iA
\omega
endsnippet

context "math()"
snippet ;0 "theta" iA
\theta
endsnippet

context "math()"
snippet ;vt "vartheta" iA
\vartheta
endsnippet

context "math()"
snippet ;r "rho" iA
\rho
endsnippet

context "math()"
snippet ;s "sigma" iA
\sigma
endsnippet

context "math()"
snippet ;S "Sigma" iA
\Sigma
endsnippet

context "math()"
snippet ;vs "varsigma" iA
\varsigma
endsnippet

context "math()"
snippet ;t "tau" iA
\tau
endsnippet

context "math()"
snippet ;u "upsilon" iA
\upsilon
endsnippet

context "math()"
snippet ;x "xi" iA
\xi
endsnippet

context "math()"
snippet ;X "Xi" iA
\Xi
endsnippet

context "math()"
snippet ;p "psi" iA
\psi
endsnippet

context "math()"
snippet ;z "zets" iA
\zeta
endsnippet

context "math()"
snippet ;P "Psi" iA
\Psi
endsnippet

snippet sec "section" b
\section{${1:section name}}
$0
endsnippet

snippet subsec "subsection" b
\subsection{${1:section name}}
$0
endsnippet

snippet subsubsec "subsubsection" b
\subsubsection{${1:section name}}
$0
endsnippet

snippet template "Basic template" b
\documentclass[a4paper]{article}
\input{/home/leeliu/preamble.tex}
\begin{document}
	$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}[$2]
	$3
\\end{$1}

$0

endsnippet

snippet bef "begin{field} / end{field}" bA
\\begin{field}
	$1
\\end{field}

$0

endsnippet

snippet bnote "begin{note} / end{note}" bA
\\begin{note}
	$1
\\end{note}

$0

endsnippet

priority 100
snippet ... "ldots" iA
\ldots 
endsnippet


snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
$0
endsnippet

snippet fig "figure environment (includegraphics)" b
	\begin{figure}[${1:htpb}]
	\begin{center}
		${2:\includegraphics[width=0.$3\textwidth]{$4}}
	\end{center}
	\caption{${5:$4}}
	\label{fig:${6:${4/\W+/-/g}}}
	\end{figure}
	$0
endsnippet

# Enumerate
snippet enum "enumerate environment" b
	\begin{enumerate}
		\item $0
	\end{enumerate}
endsnippet
snippet enuma "enumerate environment" b
	\begin{enumerate}[(a)]
		\item $0
	\end{enumerate}
endsnippet
snippet enumi "enumerate environment" b
	\begin{enumerate}[(i)]
		\item $0
	\end{enumerate}
endsnippet

snippet bitem "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet item "\item" b
	\item $0
endsnippet


snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
\(${1}\)`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{aligned}
	${1:${VISUAL}}
.\end{aligned}
endsnippet

snippet thm "theorem-Ank" b
\begin{note}
%%%%uuid
\begin{field}
     `!p 
import uuid
if not snip.c:
	snip.rv = uuid.uuid1()`
\end{field}
%%%%Premise1
\begin{field}
$1
\end{field}
%%%%Premise2
\begin{field}
$2
\end{field}
%%%%Premise3
\begin{field}
$3
\end{field}
%%%%Premise4
\begin{field}
$4  
\end{field}
%%%%Consequence 1
\begin{field}
$5
\end{field}
%%%%Consequence 2
\begin{field}
$6
\end{field}
%%%%Consequence 3
\begin{field}
$7 
\end{field}
%%%%Consequence 4
\begin{field}
$8  
\end{field}
%%%% Name
\begin{field}
$9 
\end{field}
%%%% Context
\begin{field}
$10 
\end{field}
%%%% Subcontext
\begin{field}
$11  
\end{field}
\end{note}
$0 
endsnippet

snippet equiv "equivalence-Ank" b
\begin{note}
%%%%uuid
\begin{field}
     `!p 
import uuid
if not snip.c:
	snip.rv = uuid.uuid1()`
\end{field}
%%%%Equivalence 1
\begin{field}
$1
\end{field}
%%%%Equivalence 2
\begin{field}
$2
\end{field}
%%%%Equivalence 3
\begin{field}
$3
\end{field}
%%%%Equivalence 4
\begin{field}
$4  
\end{field}
%%%%Equivalence 5
\begin{field}
$5  
\end{field}
%%%%Premise 1
\begin{field}
$6
\end{field}
%%%%Premise 2
\begin{field}
$7
\end{field}
%%%%Premise 3
\begin{field}
$8 
\end{field}
%%%%Premise 4
\begin{field}
$9  
\end{field}
%%%%Consequence 5
\begin{field}
$10  
\end{field}
%%%% Name
\begin{field}
$11 
\end{field}
%%%% Context
\begin{field}
$12  
\end{field}
%%%% Subcontext
\begin{field}
$13  
\end{field}
\end{note}
$0 
endsnippet


snippet def "definition-Ank" b
\begin{note}
%%%%uuid
\begin{field}
     `!p 
import uuid
if not snip.c:
	snip.rv = uuid.uuid1()`
\end{field}
%%%%Premise1
\begin{field}
$1
\end{field}
%%%%Consequence 1
\begin{field}
$2
\end{field}
%%%% Consequence 2
\begin{field}
$3
\end{field}
%%%% Consequence 3
\begin{field}
$4  
\end{field}
%%%% Consequence 4
\begin{field}
$5
\end{field}
%%%% Consequence 5
\begin{field}
$6
\end{field}
%%%% Name
\begin{field}
$7 
\end{field}
%%%% Context
\begin{field}
$8  
\end{field}
%%%% Subcontext
\begin{field}
$9  
\end{field}
\end{note}
$0 
endsnippet

snippet conpro "conpro-Ank" b
\begin{note}
%%%%uuid
\begin{field}
     `!p 
import uuid
if not snip.c:
	snip.rv = uuid.uuid1()`
\end{field}
%%%%Pro1
\begin{field}
$1
\end{field}
%%%%Pro2
\begin{field}
$2
\end{field}
%%%% Pro3
\begin{field}
$3
\end{field}
%%%% Pro 4
\begin{field}
$4  
\end{field}
%%%% Con 1
\begin{field}
$5
\end{field}
%%%% Con 2
\begin{field}
$6
\end{field}
%%%% Con 3
\begin{field}
$7
\end{field}
%%%% Con 4
\begin{field}
$8
\end{field}
%%%% Con 5
\begin{field}
$9
\end{field}
%%%% Name
\begin{field}
$10
\end{field}
%%%% Context
\begin{field}
$11 
\end{field}
%%%% Subcontext
\begin{field}
$12  
\end{field}
\end{note}
$0 
endsnippet

snippet proofs "proofs-Ank" b
\begin{note}
%%%%uuid
\begin{field}
     `!p 
import uuid
if not snip.c:
	snip.rv = uuid.uuid1()`
\end{field}
%%%%Step1
\begin{field}
$1
\end{field}
%%%%Step2
\begin{field}
$2
\end{field}
%%%%Step3
\begin{field}
$3
\end{field}
%%%%Step 4
\begin{field}
$4  
\end{field}
%%%%Step5
\begin{field}
$5
\end{field}
%%%%Step6
\begin{field}
$6
\end{field}
%%%% Name
\begin{field}
$10
\end{field}
%%%% Context
\begin{field}
$11 
\end{field}
%%%% Subcontext
\begin{field}
$12  
\end{field}
\end{note}
$0 
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
try:
   grepOut = subprocess.check_output(['wolframscript', '-code', code])
except subprocess.CalledProcessError as grepexc:
   snip.rv = grepexc.output
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} 
$1 
\end{pmatrix} 
$0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} 
$1 
\end{bmatrix} 
$0
endsnippet

context "math()"
snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right)$0
endsnippet


snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet


snippet lr{ "left\{ right\}" iA
\left{ ${1:${VISUAL}} \right} $0
endsnippet

snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet sum "sum" iA 
\sum_{${1:i}=${2:1}}^{${3:\infty}} ${4:a_i z^i}
endsnippet
context "math()"
snippet taylor "taylor" iA
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet lim "limit" iA 
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet lsup "limsup" iA 
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet linf "liminf" iA 
\liminf_{${1:n} \to ${2:\infty}} 
endsnippet


context "math()"
snippet prod "product" iA 
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet


context "math()"
snippet xx "times" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet ;C "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
\mid 
endsnippet


context "math()"
snippet cc "subset" Ai
\subset  
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet



context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bold" "bold" riA
\boldsymbol{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "bold" "bold" riA
\boldsymbol{$1}$0
endsnippet


priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet


priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet

context "math()"
snippet bf "\mathbf" iA
\mathbf{$1}$0
endsnippet

snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

# vim:ft=snippets
